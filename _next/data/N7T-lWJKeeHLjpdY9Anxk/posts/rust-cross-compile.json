{"pageProps":{"content":"<p><a href=\"/posts/smashfreaks-replace-with-rust\">WebサービスをRustでフルリプレイスした話</a> を書きましたが、途中で ECS Task の cpu_architecture を X86_64 から ARM に変更しています。（なんか Graviton2 がちょっと安いしちょっと性能がいいらしい）<br>\nその際に GitHub Actions 上でクロスコンパイルをする必要があったのですが、それでハマったのでメモしておきます。<br>\nちなみにこれが本当に正しいのかよくわかってないので、別の良い方法があるかもしれません。</p>\n<h2 id=\"前提\">前提</h2>\n<ul>\n<li>この Rust プロジェクトは axum で作られた Web アプリケーションです。</li>\n<li>GitHub Actions 上でビルドされ、AWS ECS にデプロイされます。</li>\n<li>GitHub Actions では ubuntu-latest を使っていて、これは現状 x86_64 です。（<a href=\"https://github.blog/changelog/2023-10-30-accelerate-your-ci-cd-with-arm-based-hosted-runners-in-github-actions/\" rel=\"nofollow\">Accelerate your CI/CD with Arm-based hosted runners in GitHub Actions - The GitHub Blog</a> によるともうすぐ使えるようになるかもしれない）</li>\n<li>実行コンテナイメージは <code>gcr.io/distroless/cc-debian12</code> です。</li>\n</ul>\n<h2 id=\"まず何をやったか\">まず何をやったか</h2>\n<p>一番楽な方法をまず試します。<br>\n<code>docker/build-push-action</code> を使って Docker イメージをビルドしているので、これに <code>platforms: linux/arm64</code> を追加してみました。すると・・・？</p>\n<p><img src=\"./static/cross-compile-before.png\" alt=\"Before\"></p>\n<p>脅威の Billable time <strong>5h 10m</strong>！</p>\n<h2 id=\"何が問題だったか\">何が問題だったか</h2>\n<p>Docker のビルドで実行ホストと違うプラットフォーム用のコンテナのビルドには QEMU エミュレーションが使われるらしいのですが、これがどうも遅いらしいです。</p>\n<h2 id=\"どう解決したか\">どう解決したか</h2>\n<p>Rust のクロスコンパイルを使うことにしました。しかし調べてすぐ出てくるような方法ではイマイチうまく解決できませんでした。最終的には色々なところからちょっとずつ拾ってきて試したところ動くようになりました。</p>\n<pre><code class=\"hljs language-shell\">apt-get install g++-aarch64-linux-gnu\nCARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=\"aarch64-linux-gnu-gcc\"\nCC_aarch64_unknown_linux_gnu=\"aarch64-linux-gnu-gcc\"\nCXX_aarch64_unknown_linux_gnu=\"aarch64-linux-gnu-g++\"\n</code></pre>\n<blockquote>\n<p><a href=\"https://kerkour.com/rust-cross-compilation\" rel=\"nofollow\">https://kerkour.com/rust-cross-compilation</a></p>\n</blockquote>\n<pre><code class=\"hljs language-shell\">dpkg --add-architecture arm64\napt-get install libssl-dev:arm64\n</code></pre>\n<blockquote>\n<p><a href=\"https://fltk-rs.github.io/fltk-book/Cross-Compiling.html#x64-linux-gnu-to-aarch64-linux-gnu\" rel=\"nofollow\">https://fltk-rs.github.io/fltk-book/Cross-Compiling.html#x64-linux-gnu-to-aarch64-linux-gnu</a></p>\n</blockquote>\n<pre><code class=\"hljs language-shell\">PKG_CONFIG_SYSROOT_DIR=\"/usr/aarch64-linux-gnu/\"\n</code></pre>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/68871193/pkg-config-error-during-rust-cross-compilation\" rel=\"nofollow\">https://stackoverflow.com/questions/68871193/pkg-config-error-during-rust-cross-compilation</a></p>\n</blockquote>\n<p>これらを Dockerfile に追加してビルドしました。すると・・・？</p>\n<p><img src=\"./static/cross-compile-after.png\" alt=\"After\"></p>\n<p>Billable time <strong>22m</strong>！</p>\n<h2 id=\"結果\">結果</h2>\n<p>嬉しい（なんか変なところとかこうした方がいいみたいなのがあったらよければ教えてください）</p>","slug":"rust-cross-compile","title":"Rustのクロスコンパイルでハマった話","published":"2024-03-21","publishedIndex":0,"tags":["Rust"],"fileName":"rust-cross-compile","staticFiles":["cross-compile-after.png","cross-compile-before.png"]},"__N_SSG":true}