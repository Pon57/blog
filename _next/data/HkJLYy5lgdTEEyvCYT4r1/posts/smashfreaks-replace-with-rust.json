{"pageProps":{"content":"<p>個人で作ってた Web サービスを Rust で作り直したので、熱が冷めないうちに覚えてることを備忘録的に書いておこうと思います。<br>\nいくつか本のリンクを貼ってますが、全て Amazon のアソシエイトリンクなのでそこが気になる人は検索して買ってください。</p>\n<h2 id=\"どんなサービス\">どんなサービス？</h2>\n<p>どんなサービスかを軽く説明しておきます。<br>\n<a href=\"https://smashfreaks.games\" rel=\"nofollow\">https://smashfreaks.games</a><br>\nSmashFreaks というスマブラ界隈の主にオフラインイベントで使われているサービスです。イベントに参加しているユーザー同士が1対1でマッチングをし、対戦するモニターを自動で割り当てます。対戦後に結果報告をすることでレート計算が行われます。<br>\n全てユーザーの操作に依存しているため、特別な管理作業以外の運営作業がほとんど発生せず、イベントスタッフも対戦に参加することができます。<br>\n2019年7月にリリースされ、4年半くらいのサービスです。<br>\n<a href=\"https://smashlog.games/9818\" rel=\"nofollow\">https://smashlog.games/9818</a></p>\n<h2 id=\"なぜ作り直すのか\">なぜ作り直すのか</h2>\n<p>SmashFreaks は元々 PHP の <a href=\"https://laravel.com\" rel=\"nofollow\">Laravel</a> 製で、当時新卒1年目の配属が決まった頃くらいに開発期間1ヶ月ほどでリリースしました。特に何も考えずに作っていたのでこの世の全てを Controller に書き、テストは存在せず、Eloquent のモデルを直接あれこれするみたいな感じでした。<br>\nその後すぐ新型コロナのあれこれでオフラインイベントが無くなり殆ど使われなくなってドメイン代とサーバー代だけ払ってました。何回か途中でリファクタリングをしようとするもモチベ続かずに途中で止まるみたいなことをしてました。<br>\n新型コロナが出始めてからしばらく経った後に、オフラインイベントが復活してきたあたりで使ってくれるところが徐々に増えてきました。サイトの出来に満足いってなかった自分は「これはなんとかしないといかん！」と触ろうとするんですが、「これこのコードの改善と作り直しの時間ほとんど変わらなさそうじゃね？」みたいな感じに思ったので作り直すことにしました。</p>\n<h2 id=\"作り直し時の判断\">作り直し時の判断</h2>\n<p>自分は Web サービスは PHP でしか作ったことがありませんでした。インフラもアルバイトで多少の構築経験を得られたくらいで、それまではレンタルサーバーにポン置きだったため、殆ど知識はありません。<br>\n今回も PHP で作り直そうとしており、<a href=\"https://bearsunday.github.io/manuals/1.0/ja/\" rel=\"nofollow\">BEAR.Sunday</a> を触ってみたりとかフロントに <a href=\"https://nextjs.org\" rel=\"nofollow\">Next.js</a> を触ってみたりとかしたんですが、結局全然作りませんでした。（ログインぐらいは作ってみた）<br>\n結果選択したのは Rust でした。Rust は触りたいなという興味があってほんの少し触っていたこと（フレンドに頼まれた Discord bot の作成とか）、<a href=\"https://twitter.com/kenkoooo\" rel=\"nofollow\">kenkoooo</a>さんの発信等で Rust でも Web バックエンドいけるらしいという情報があったのでまあやってみるか〜と Rust を選びました。パフォーマンスがどーとかそういうのは選定理由に入ってません。規模が全然大きくない個人開発サービスですしね。<br>\nDB のデータだけ dump してきて、そこから作りながらマイグレーションを書いていくみたいな感じで進めることにしました。作り直して触れるようになる（触るモチベが出るようになる）のが目的ですが、明らかに気になるところや要望をもらっているところは新機能実装や修正をしました。</p>\n<h2 id=\"開発期間\">開発期間</h2>\n<p>リポジトリは作ったのが2022年7月でなので1年半くらい。途中全く触らなかったりとかもあり実際にもりもり書き始めたのが2023年の9月くらいなんで、稼働したのは半年くらい？<br>\nなんかちょうど筆乗り始め時期に<a href=\"https://iosdc.jp/2022/\" rel=\"nofollow\">iOSDC Japan 2022</a>と<a href=\"https://iosdc.jp/2023/\" rel=\"nofollow\">2023</a>があって、両方とも会場で休憩時間にちょっと書いていた記憶がありますね。</p>\n<p><img src=\"./static/contribution.png\" alt=\"Contribution\"></p>\n<h2 id=\"構成\">構成</h2>\n<h3 id=\"インフラ\">インフラ</h3>\n<p>AWS を使っています。今まで自分は前述の通りレンタルサーバーにポン置きした PHP という構成で公開しかしてなかったです。流石にそろそろ他の方法触っておくか・・・みたいな気持ちもあり、今流行り（遅い）のクラウドや！ということで AWS を使ってみることにしました。</p>\n<p>構成はよくある CloudFront -> ALB -> ECS Fargate -> RDS(MariaDB), ElastiCache(Redis) です。</p>\n<p><img src=\"./static/smashfreaks-aws.png\" alt=\"SmashFreaks AWS 構成図\"></p>\n<p>さらっと構成図を書いてみました。コンテナは public subnet においてます。ログインに外部サービスを使うためアウトバウンドが必要で、 NAT Gateway とか VPC Endpoint とかが高かったので、Security Group に頑張ってもらって・・・。<br>\nこれらは Terraform で定義ファイルを作り、apply でいつでも同じものが作れるようにしています。</p>\n<p>なんもわからんの状態で作ってみるのはこの本が役に立ちました。ちなみにこの本はスマブラのフレンドから教えてもらいました。</p>\n<p><a href=\"https://amzn.to/3HYNEDW\" rel=\"nofollow\">Amazon Web Services基礎からのネットワーク＆サーバー構築改訂</a></p>\n<p>まずこの本を参考に手動で Web UI 上で構築してみて動くことを確認した後、<a href=\"https://developer.hashicorp.com/terraform/cli/import\" rel=\"nofollow\">Terraform CLI の Import 機能</a> を使って1個1個 import してみて Terraform の構成ファイルに落とし込みました。</p>\n<h4 id=\"bastion\">bastion</h4>\n<p>本番の RDS に繋ぎたくなった時のために bastion という ECS Service を作っています。実態は <a href=\"https://gallery.ecr.aws/amazon-ssm-agent/amazon-ssm-agent\" rel=\"nofollow\">amazon-ssm-agent/amazon-ssm-agent</a> というイメージです。AWS CLI の Session Manager を使ってローカルの好きなポートにポートフォワードして RDS に繋げるようにしています。通常時は必要なタスクを0にして無駄な課金が発生しないようにしていて、必要な時だけタスクを立ち上げるようにしています。</p>\n<h3 id=\"アプリケーション\">アプリケーション</h3>\n<p>Rust の <a href=\"https://github.com/tokio-rs/axum\" rel=\"nofollow\">axum</a> というフレームワークを使っています。非同期ランタイムが〜とかパフォーマンスが〜とかはあんまよくわかんないですが、<a href=\"https://tokio.rs\" rel=\"nofollow\">tokio</a> が作ってるのですぐ潰れることはないだろうみたいな安易な考えで採用しました。悪い話も聞かないし触っててもいい感じがするので良かったと思います。他にも <a href=\"https://actix.rs\" rel=\"nofollow\">Actix</a> は本を読んで少し触ってみたりしました。<br>\n読んだ本はこちら -> <a href=\"https://amzn.to/3SVdrTs\" rel=\"nofollow\">実践Rustプログラミング入門</a></p>\n<p>Rust はランタイムエラーが少ないな〜というところが気に入っており、今回書いたコードでランタイムエラーが出る時は基本的に OAuth とかでレスポンスが意図していない時、DB 周りで変なコードを書いた時、DB 等に接続できなかった時くらいです。それ以外は意図したエラーでハンドリングできています。<br>\n（ちなみに他の言語でも出ないように書けるとかはあると思いますが、特に意図していないけどそうなったところも気に入りポイントです。）</p>\n<h4 id=\"askama\">Askama</h4>\n<p><a href=\"https://github.com/djc/askama\" rel=\"nofollow\">djc/askama: Type-safe, compiled Jinja-like templates for Rust</a></p>\n<p>テンプレートエンジンには <a href=\"https://github.com/djc/askama\" rel=\"nofollow\">Askama</a> を使っています。<a href=\"https://github.com/Keats/tera\" rel=\"nofollow\">Tera</a> を最初使っていましたが、コンパイル時に問題が分からないのでそこが不満に感じてました。<a href=\"https://github.com/djc/askama\" rel=\"nofollow\">Askama</a> はコンパイル時に問題がわかるので最高になりました。VSCode で書いているので拡張とかは無くて、若干どこで問題が発生しているのかが分からない時があります。まあエラーログを見れば大体わかりますが・・・パフォーマンスもなんかそこそこいいらしいです。<a href=\"https://github.com/Keats/tera\" rel=\"nofollow\">Tera</a> はその都度外に置いてあるテンプレートファイルを読むみたいな感じ（多分）だったと思いますが、<a href=\"https://github.com/djc/askama\" rel=\"nofollow\">Askama</a> は生成されるシングルバイナリに含まれるみたいな感じになります。</p>\n<h4 id=\"seaorm\">SeaORM</h4>\n<p>DB 周りには <a href=\"https://www.sea-ql.org/SeaORM/\" rel=\"nofollow\">SeaORM</a> という ORM を使ってます。最初は <a href=\"https://github.com/jmoiron/sqlx\" rel=\"nofollow\">sqlx</a> を使っていました。使ってみたかった理由はなんとなくですが（またか）、<a href=\"https://github.com/jmoiron/sqlx\" rel=\"nofollow\">sqlx</a> はコンパイル時に SQL がおかしそうなことがわかる macro があったりしてちょっと羨ましさを感じます。ちょいちょいランタイムエラーで気がつくことがあります。どうするのがバランスいいんだろう・・・</p>\n<h4 id=\"tower-sessions\">tower-sessions</h4>\n<p><a href=\"https://github.com/maxcountryman/tower-sessions\" rel=\"nofollow\">maxcountryman/tower-sessions: 🥠 Sessions as a `tower` and `axum` middleware.</a></p>\n<p>セッション管理にはこの crate を使っています。同作者の <a href=\"https://github.com/maxcountryman/axum-login\" rel=\"nofollow\">axum-login</a> という crate も便利そうだな〜と思いつつ、そっちは middleware を作ったりして自前でやってたので一旦は使ってません。試してみて良さそうだったら使ってみるかも。</p>\n<h4 id=\"oauth2\">OAuth2</h4>\n<p><a href=\"https://github.com/ramosbugs/oauth2-rs\" rel=\"nofollow\">ramosbugs/oauth2-rs: Extensible, strongly-typed Rust OAuth2 client library</a></p>\n<p>アカウント認証周りにはこの crate を使っています。OAuth2 に対応しているサービスであれば簡単に使えたのでよかったです。</p>\n<h3 id=\"開発環境\">開発環境</h3>\n<p>開発環境用の Dockerfile を書いて DevContainer を使って VSCode で開発しています。</p>\n<h4 id=\"mold\">Mold</h4>\n<p><a href=\"https://github.com/rui314/mold\" rel=\"nofollow\">rui314/mold: Mold: A Modern Linker 🦠</a></p>\n<p>リンカーに <a href=\"https://github.com/rui314/mold\" rel=\"nofollow\">Mold</a> というものを使っています。<a href=\"https://crates.io/crates/cargo-watch\" rel=\"nofollow\">cargo-watch</a> を使って保存するたびにコンパイルが走るみたいな感じにしてるんですが、露骨にスピードアップを感じます。おすすめ。</p>\n<h4 id=\"orbstack\">OrbStack</h4>\n<p>Docker コンテナ環境は <a href=\"https://orbstack.dev\" rel=\"nofollow\">OrbStack</a> というのを使っています。最初は <a href=\"https://www.docker.com/products/docker-desktop/\" rel=\"nofollow\">Docker Desktop</a> を使っていて全然不満なかったんですが、<a href=\"https://orbstack.dev\" rel=\"nofollow\">OrbStack</a> にしたら立ち上げがすごい早くなりました。コンパイル自体も多少速かったです。DevContainer は何もせずそのまま使えたので、同じような環境の方にはおすすめです。</p>\n<h3 id=\"ci--cd\">CI / CD</h3>\n<p>GitHub Actions でデプロイまで自動でやってます。使っているワークフローは以下。</p>\n<ul>\n<li>main</li>\n<li>pr</li>\n<li>tagpr</li>\n<li>cache_for_deploy</li>\n<li>deploy</li>\n</ul>\n<p>それぞれについて書いていきます。</p>\n<h4 id=\"main\">main</h4>\n<p>main ブランチにマージされた時に動きます。テストだけ動かしてます。<br>\n<a href=\"https://github.com/Swatinem/rust-cache\" rel=\"nofollow\">Swatinem/rust-cache</a> を使っています。</p>\n<h4 id=\"pr\">pr</h4>\n<p>Pull Request が作られた時や、コミットが更新された時に動きます。まず <a href=\"https://github.com/dorny/paths-filter\" rel=\"nofollow\">dorny/paths-filter</a> を使ってファイルの変更をチェックし、Rust に関係するコードに変更がなければスキップします。<br>\ntest のほか、fmt や clippy を動かしています。<a href=\"https://github.com/Swatinem/rust-cache\" rel=\"nofollow\">Swatinem/rust-cache</a> を使ってビルド &#x26; キャッシュした後、それを使って test, fmt, clippy が動くようにしています。<br>\nfmt や clippy で何かあった時には Pull Request にコメントを書いてくれます。</p>\n<h4 id=\"tagpr\">tagpr</h4>\n<p><a href=\"https://github.com/Songmu/tagpr\" rel=\"nofollow\">Songmu/tagpr</a> を動かすワークフローです。main ブランチにマージされた時や、tagpr によって作られた Pull Request のラベルに変更があった時に動くようにしています。これは後から tagpr:minor とかをつけたくなった時用です。tagpr は動いた後に main ブランチに変更があれば自動で Pull Request が作られます。その Pull Request をマージするとタイトルのバージョンタグが切られ、そのタグの Release が publish されます。<br>\nこれめちゃくちゃ最高なのでおすすめです。自分は後述のワークフローと組み合わせてかなり満足度高いリリースフローが作れました。  semver の minor とかは現状は特に意味もないので気分で適当に決めてます。</p>\n<h4 id=\"cache_for_deploy\">cache_for_deploy</h4>\n<p>main ブランチに tagpr によって作られたブランチがマージされた時に動きます。デプロイのための Docker イメージをビルドします。main ブランチでキャッシュを作らないと読めない仕様があるみたいで、後述する deploy は Release が publish された時に動きます。Release の publish をトリガーとするワークフローでは確かキャッシュが共有できなかったため、ビルドのためのキャッシュは main ブランチに紐づいているここでやってます。<br>\nDockerfile 内では <a href=\"https://github.com/LukeMathWalker/cargo-chef\" rel=\"nofollow\">cargo-chef</a> を使ってレイヤーキャッシュが効くようにしています。</p>\n<h4 id=\"deploy\">deploy</h4>\n<p>tagpr によって Release が publish された時に動きます。（手動 publish でも動く）<br>\n<code>cache_for_deploy</code> が終わってから動いて欲しいため、concurrency で <code>cache_for_deploy</code> と同じ group を設定しています。<br>\ncancel-in-progress は false。<code>cache_for_deploy</code> が終わってからだとビルドにかかる時間は10秒以内なのでほぼ無しです。デプロイ時間だけ。<br>\nここでは二つデプロイしています。App 本体と、DB マイグレーションです。</p>\n<p>軽い手順を話すと、App では</p>\n<blockquote>\n<p>イメージをビルドして ECR にプッシュ -> <a href=\"https://github.com/aws-actions/amazon-ecs-render-task-definition\" rel=\"nofollow\">aws-actions/amazon-ecs-render-task-definition</a> でタスク定義を更新 -> <a href=\"https://github.com/aws-actions/amazon-ecs-deploy-task-definition\" rel=\"nofollow\">aws-actions/amazon-ecs-deploy-task-definition</a> でタスク定義をデプロイ</p>\n</blockquote>\n<p>DB マイグレーションは ECS のクラスターでタスクとして動かしているので</p>\n<blockquote>\n<p>イメージをビルドして ECR にプッシュ -> <a href=\"https://github.com/aws-actions/amazon-ecs-render-task-definition\" rel=\"nofollow\">aws-actions/amazon-ecs-render-task-definition</a> でタスク定義を更新 -> <code>aws ecs run-task</code> コマンドでタスクを実行</p>\n</blockquote>\n<p>という感じにしています。（こっちはもっといい方法ありそう？）</p>\n<h4 id=\"renovate\">Renovate</h4>\n<p>バージョンアップには <a href=\"https://www.mend.io/renovate/\" rel=\"nofollow\">Renovate</a> を使ってます。勝手に Pull Request を作ってくれるので便利です。開発環境用の Dockerfile では <a href=\"https://github.com/rui314/mold\" rel=\"nofollow\">Mold</a> のコンパイルや <a href=\"https://crates.io/crates/cargo-watch\" rel=\"nofollow\">cargo-watch</a> 等の install をしているんですが、それのバージョン更新だけ拾えなかったので <code>regexManagers</code> で拾えるように設定してます。</p>\n<h2 id=\"リリース\">リリース</h2>\n<p>まずはサブドメインを作ってその上でオフラインイベント運営の方に協力を得てテストイベントを開催しました。そこで特に問題なく動いてました。<br>\n後はテストイベントを積み重ねるか、えいやでリリースするかで、めんどくさくなってえいやでリリース日を決めてリリースしましたw<br>\nリリース日の後に使われる中では最大規模のイベントで使われることがわかっており、そこである程度バグは出るかな・・・みたいな。<br>\n実際進行不能バグはなかったものの、マッチングロジックにおけるバグはいくつかあり、修正をデプロイしまくりました。進行不能バグはなかったので大成功でした。（元々のプログラムの方にも普通にバグはあったので）<br>\n一応リリース後1週間ぐらいはそれなりに監視をしてバグがあったら直す生活をしました。</p>\n<h3 id=\"負荷の感じ\">負荷の感じ</h3>\n<p>スペックよくわからないんで全て最低でリリースしてます。ECS Fargate の CPU は LINUX/ARM64 の 0.25vCPU、 メモリは 512MB です。RDS とか ElastiCache は t4g.micro です。<br>\n負荷を見ていると、メモリ使用率は常に2%以下。CPU使用率も高い時で36%くらいでした。大丈夫そう。<br>\n高い時というのは最大規模のイベントで使われた日で、サイト内での総参加者数が214人が1つ、29人が1つ、14人が1つの計3つのイベントで同じ時間に使われていました。<br>\n戦っている人がいたり帰ってたり休憩してたりそもそもやってなかったりする人がいるので同時に214人+29人+14人が常に触っているわけでは全然ないんですが、それでも結構余裕な感じでしたね。一応オートスケールの設定は入れてました。</p>\n<p><img src=\"./static/metrics.png\" alt=\"Metrics\"></p>\n<p>グラフではメモリが3%までいってるんですが、無駄なキャッシュをしていてほぼ意味ないところだったので後に消しています。消した後は2%以下安定してますね。（メモリの0になってるところはデプロイしているところで、5回くらいデプロイしたらしい。）</p>\n<p>ちなみに PHP の時は1000円くらいのサーバーを借りてたんですが、ふと気になって過去の CPU 使用率を見てみたら高くても2%でした。 (2Core 1GB)<br>\nメモリ使用率は6%までいってた時があったんで、メモリ使用量は明確に減ってそう。CPU 使用率は元々低いのでよくわからない。</p>\n<h3 id=\"rust-の感想\">Rust の感想</h3>\n<p>開発環境周りも含め書いていてかなり気持ちがいいです。clippy とかもかなり良い。ライフタイムや所有権とかはまだいまいち慣れてません。隙あらば <code>.clone()</code> とかは大分減ったと思いますが、それでもうーんこれは <code>.clone()</code>！w みたいなことはたまにします。<br>\nそんな言語仕様にあまり詳しくない自分ぐらいの浅ちゃぷでも Web バックエンド作れるので、少しでも触ってみたい人がいたら触ってみてください。気持ちいいですよ！<br>\nこれから知識を付けていって、より Rust っぽいコードに変えていく作業が続いていくんだろうなと思うとそれも楽しそうです。</p>\n<p>あとはガッと書き換える時のやりやすさですね。最初はめちゃくちゃエラーが出てキツってなるんですが、1個1個直してるとなんか勝手に動くようになってて、しかも動くことが保証されているかのような安心感があります。（実際殆ど問題なく動く）</p>\n<h3 id=\"これからの課題\">これからの課題</h3>\n<p><img src=\"./static/test-coverage.png\" alt=\"Test Coverage\"></p>\n<p>テストがないんです・・・。（テストもなく〜とか言ってたのに結局ない）<br>\nなのでテストをモリモリ書いていこうと思います。でもテストなくてもロジックのバグくらいしかなかったのが凄いなと思いました。（それをテストでry）<br>\nまあ簡単な Web アプリですし CRUD が主なところもあると思いますが。<br>\nという感じでテストを書いていくぞとなっています。</p>\n<p>また、<a href=\"https://www.sea-ql.org/SeaORM/\" rel=\"nofollow\">SeaORM</a> の Relation 周りがまだ使いこなせてなくて結構ぐっちゃぐちゃなので、それも良い感じにどうにかしたいです。</p>\n<p>後はちゃんと Rust っぽいコードが書けるようになっていきたいですね。</p>\n<h2 id=\"おわり\">おわり</h2>\n<p>ということで Rust でフルリプレイスした話を書いてみました。パフォーマンスとかコストとかをあんま考えずにできるのが個人開発の良いところですね。ただ、どう考えても構成がオーバースペックで高いな〜〜みたいな感じには思ってるので、そのうちコストを下げるための何かを考えるかもしれません。<br>\n個人開発は完全に自由なので最高ですね 🥳</p>","slug":"smashfreaks-replace-with-rust","title":"WebサービスをRustでフルリプレイスした話","published":"2024-2-14","publishedIndex":0,"tags":["Rust","個人開発"],"fileName":"smashfreaks-replace-with-rust","staticFiles":["contribution.png","metrics.png","smashfreaks-aws.png","test-coverage.png"]},"__N_SSG":true}